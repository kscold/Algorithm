# N * M 크기의 직 사각형을 이동할 수 있고 맵의 각 칸은 (A, B)로 나타낼 수 있다.
# A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다. 캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다.
# 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정한다.
# 2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다. 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
# 3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다. 단, 이때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.
# 위 과정을 반복적으로 수행하면서 캐릭터의 움직임에 이상이 이쓴ㄴ지 테스트하려고 한다. 메뉴얼에 따라 캐릭터를 이동시킨 뒤에, 캐릭터가 방문한 칸의 수를 출력하는 프로그램을 만드시오.

# 입력
# 4 4
# 1 1 0
# 1 1 1 1
# 1 0 0 1
# 1 1 0 1
# 1 1 1 1

# 출력
# 3

N, M = map(int, input().split())  # 맵 크기 입력 받음

x, y, d = map(int, input().split())  # x, y 좌표값과 방향 값을 입력 받음

gameMap = [list(map(int, input().split())) for _ in range(N)]  # 맵의 정보를 입력 받음

d_tmp = [[0] * M for _ in range(N)]  # 그 맵을 방문을 했는지 저장하는 맵 크기와 똑같은 방문 리스트
d_tmp[x][y] = 1  # 처음 주어진 x, y 위치를 방문처리

dx = [1, 0, -1, 0]
dy = [0, 1, 0, -1]


# dx, dy의 조합을 통해 북, 동, 남, 서 를 표현

def turn_left():  # 왼쪽으로 도는 함수
    global d  # 전역 변수 선언을 함으로써 함수 밖에서도 변수를 참조할 수 있음
    d -= 1  # 방향 전환
    if d == -1:  # 북쪽(d = 0)에서 -1를 하면 서쪽이 되어야하므로
        d = 3  # 서쪽을 대입


count = 1  # 움직인 횟수를 카운트 하는 변수
turn_count = 0  # 돈 횟수를 카운트 하는 변수
while True:
    turn_left()  # 왼쪽으로 도는 함수
    # 방향 계산
    nx = x + dx[d]
    ny = y + dy[d]

    if d_tmp[nx][ny] == 0 and gameMap[nx][ny] == 0:  # 방문하지 않았고, 맵이 육지인 곳
        d_tmp[nx][ny] = 1  # 방문 처리
        # 위치 좌표 이동
        x = nx
        y = ny
        count += 1  # 움직인 횟수 더하기
        turn_count = 0  # 회전한 횟수 초기화
        continue  # while 문을 다시 실행
    else:  # 방문했거나, 바다인 곳을 만나면
        turn_count += 1  # 회전한 횟수를 추가

    if turn_count == 4:  # 회전을 4번해서 제 자리로 돌아오면
        # 뒤로 이동 계산
        nx = x - dx[d]
        ny = y - dy[d]

        if gameMap[nx][ny] == 0: # 뒤로 이동했는데 육지이면
            # 위치 좌표 이동
            x = nx
            y = ny
        else: # 뒤로 이동했는데 바다이면
            break # 끝냄

        turn_count = 0 # 회전 횟수 초기화

print(count)
