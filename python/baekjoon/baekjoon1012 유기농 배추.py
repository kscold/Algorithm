# 차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다.
# 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다. 한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.

# 한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다.
# 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.
# 예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다. 0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

# 1	 1	0	0	0	0	0	0	0	0
# 0	 1	0	0	0	0	0	0	0	0
# 0	 0	0	0	1	0	0	0	0	0
# 0	 0	0	0	1	0	0	0	0	0
# 0	 0	1	1	0	0	0	1	1	1
# 0	 0	0	0	1	0	0	1	1	1

# 입력
# 2
# 10 8 17
# 0 0
# 1 0
# 1 1
# 4 2
# 4 3
# 4 5
# 2 4
# 3 4
# 7 4
# 8 4
# 9 4
# 7 5
# 8 5
# 9 5
# 7 6
# 8 6
# 9 6
# 10 10 1
# 5 5

# 출력
# 5
# 1

import sys
sys.setrecursionlimit(10000)
def dfs(graph, x, y):
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    # 상 하 좌 우

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if (0 <= nx < m) and (0 <= ny < n):
            if graph[ny][nx] == 1:
                graph[ny][nx] = -1
                dfs(graph, nx, ny)



t = int(input())

for _ in range(t):
    m, n, k = map(int, input().split()) # 머리속으로 행렬을 안했갈리는 것이 중요
    data = [[0] * m for _ in range(n)]
    result = 0

    for _ in range(k):
        x, y = map(int, input().split())
        data[y][x] = 1 # 실 좌표는 x y가 반대이므로

    # print(data)

    for i in range(m):
        for j in range(n):
            if data[j][i] == 1:
                dfs(data, i, j)
                result += 1
    print(result)

